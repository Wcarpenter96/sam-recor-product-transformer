import time
from typing import Dict, List

from recor_layer.requests.woocommerce.woocommerce_batch_update_categories_request import \
    WooCommerceBatchUpdateCategoriesRequest
from recor_layer.requests.woocommerce.woocommerce_batch_update_products_request import \
    WooCommerceBatchUpdateProductsRequest
from recor_layer.requests.woocommerce.woocommerce_list_all_categories_request import \
    WooCommerceListAllCategoriesRequest


class WooCommerceService:
    """Handles interactions with the WooCommerce API."""

    def __init__(self):
        """Initializes the WooCommerceService with request objects."""
        self.batch_update_categories_request = WooCommerceBatchUpdateCategoriesRequest()
        self.batch_update_products_request = WooCommerceBatchUpdateProductsRequest()
        self.list_all_categories_request = WooCommerceListAllCategoriesRequest()

    def delete_products(self, delete_categories_ids: List[int]):
        return self.batch_update_products_request.run(delete_product_ids=delete_categories_ids)

    def delete_categories(self, delete_categories_ids: List[int]):
        return self.batch_update_categories_request.run(delete_categories_ids=delete_categories_ids)

    def batch_update_products(
        self, new_products: List[Dict], old_products: List[Dict]
    ) -> Dict:
        """
        Creates new and updates existing WooCommerce products in a batch.

        Args:
            new_products: A list of dictionaries representing new product data.
            old_products: A list of dictionaries representing existing product data to update.

        Returns:
            A dictionary containing the response from the WooCommerce API.
        """
        return self.batch_update_products_request.run(
            new_products=new_products, old_products=old_products
        )

    def batch_update_categories(
        self, new_categories: List[Dict], old_categories: List[Dict]
    ) -> Dict:
        """
        Creates new and updates existing WooCommerce categories in a batch.

        Args:
            new_categories: A list of dictionaries representing new category data.
            old_categories: A list of dictionaries representing existing category data to update.

        Returns:
            A dictionary containing the response from the WooCommerce API.
        """
        return self.batch_update_categories_request.run(
            new_categories=new_categories, old_categories=old_categories
        )

    def list_all_categories(self) -> List[Dict]:
        """
        Retrieves all WooCommerce categories.

        Returns:
            A list of dictionaries, where each dictionary represents a WooCommerce category.
        """
        return self.list_all_categories_request.run()

    def delete_in_batches(self, method, woocommerce_ids, batch_size=100, delay_seconds=0.5):
        """
        Deletes a list of WooCommerce items by breaking them into batches.

        Args:
            woocommerce_ids (list): A list of IDs to delete.
            method (request): WooCommerceBatchUpdateCategoriesRequest or WooCommerceBatchUpdateProductsRequest.
            batch_size (int): The maximum number of product IDs to delete in a single request.
                              Defaults to 100, as per the WooCommerce API limit.
            delay_seconds (float): The delay in seconds to wait between each batch request.
                                   Helps to avoid hitting API rate limits. Defaults to 0.5 seconds.
        """
        if not woocommerce_ids:
            print("ERROR: No IDs provided for deletion.")
            return

        total_ids = len(woocommerce_ids)
        print(f"ATTEMPT: Starting batch deletion for {total_ids} products...")

        # Iterate through the product IDs in chunks
        for i in range(0, total_ids, batch_size):
            batch = woocommerce_ids[i:i + batch_size]
            batch_num = (i // batch_size) + 1
            print(f"ATTEMPT: Processing batch {batch_num} ({len(batch)} products)...")

            try:
                # Call the actual WooCommerce service delete method
                response = method.delete_products(batch)
                print(f"SUCCESS:  Batch {batch_num} deletion successful. Response: {response}")
            except Exception as e:
                print(f"ERROR: Error deleting batch {batch_num}: {e}")

            # Introduce a delay if there are more batches to process
            if i + batch_size < total_ids:
                print(f"ATTEMPT: Waiting for {delay_seconds} seconds before next batch...")
                time.sleep(delay_seconds)
            else:
                print("SUCCESS: Last batch processed.")

        print(f"SUCCESS: Batch deletion process completed for {total_ids} products.")
